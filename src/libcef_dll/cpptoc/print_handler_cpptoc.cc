// Copyright (c) 2014 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/print_handler_cpptoc.h"
#include "libcef_dll/ctocpp/print_dialog_callback_ctocpp.h"
#include "libcef_dll/ctocpp/print_job_callback_ctocpp.h"
#include "libcef_dll/ctocpp/print_settings_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK print_handler_on_print_settings(
    struct _cef_print_handler_t* self, struct _cef_print_settings_t* settings,
    int get_defaults) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: settings; type: refptr_diff
  DCHECK(settings);
  if (!settings)
    return;

  // Execute
  CefPrintHandlerCppToC::Get(self)->OnPrintSettings(
      CefPrintSettingsCToCpp::Wrap(settings),
      get_defaults?true:false);
}

int CEF_CALLBACK print_handler_on_print_dialog(
    struct _cef_print_handler_t* self, int has_selection,
    cef_print_dialog_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: callback; type: refptr_diff
  DCHECK(callback);
  if (!callback)
    return 0;

  // Execute
  bool _retval = CefPrintHandlerCppToC::Get(self)->OnPrintDialog(
      has_selection?true:false,
      CefPrintDialogCallbackCToCpp::Wrap(callback));

  // Return type: bool
  return _retval;
}

int CEF_CALLBACK print_handler_on_print_job(struct _cef_print_handler_t* self,
    const cef_string_t* document_name, const cef_string_t* pdf_file_path,
    cef_print_job_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: document_name; type: string_byref_const
  DCHECK(document_name);
  if (!document_name)
    return 0;
  // Verify param: pdf_file_path; type: string_byref_const
  DCHECK(pdf_file_path);
  if (!pdf_file_path)
    return 0;
  // Verify param: callback; type: refptr_diff
  DCHECK(callback);
  if (!callback)
    return 0;

  // Execute
  bool _retval = CefPrintHandlerCppToC::Get(self)->OnPrintJob(
      CefString(document_name),
      CefString(pdf_file_path),
      CefPrintJobCallbackCToCpp::Wrap(callback));

  // Return type: bool
  return _retval;
}

void CEF_CALLBACK print_handler_on_print_reset(
    struct _cef_print_handler_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefPrintHandlerCppToC::Get(self)->OnPrintReset();
}


// CONSTRUCTOR - Do not edit by hand.

CefPrintHandlerCppToC::CefPrintHandlerCppToC(CefPrintHandler* cls)
    : CefCppToC<CefPrintHandlerCppToC, CefPrintHandler, cef_print_handler_t>(
        cls) {
  struct_.struct_.on_print_settings = print_handler_on_print_settings;
  struct_.struct_.on_print_dialog = print_handler_on_print_dialog;
  struct_.struct_.on_print_job = print_handler_on_print_job;
  struct_.struct_.on_print_reset = print_handler_on_print_reset;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCppToC<CefPrintHandlerCppToC,
    CefPrintHandler, cef_print_handler_t>::DebugObjCt = 0;
#endif

